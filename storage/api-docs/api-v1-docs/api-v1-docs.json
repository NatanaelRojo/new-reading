{
    "openapi": "3.0.0",
    "info": {
        "title": "New Reading Api",
        "description": "API documentation for your Laravel application.",
        "contact": {
            "email": "rojonatanael99@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://my-default-host.com",
            "description": "Demo API Server"
        }
    ],
    "paths": {
        "/api/authors": {
            "get": {
                "tags": [
                    "Authors"
                ],
                "summary": "Get a paginated list of authors",
                "description": "Returns a paginated list of authors, optionally filtered.",
                "operationId": "getAuthorsList",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page (default: 10)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Authors"
                ],
                "summary": "Create a new author",
                "description": "Creates a new author record in the database.",
                "operationId": "createAuthor",
                "requestBody": {
                    "description": "Author data to store",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreAuthorRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Author created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Author"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/authors/{author}": {
            "get": {
                "tags": [
                    "Authors"
                ],
                "summary": "Get a single author by ID",
                "description": "Returns a single author record.",
                "operationId": "getAuthorById",
                "parameters": [
                    {
                        "name": "author",
                        "in": "path",
                        "description": "ID of the author to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Author"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Author not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Authors"
                ],
                "summary": "Update an existing author",
                "description": "Updates an existing author record by ID.",
                "operationId": "updateAuthor",
                "parameters": [
                    {
                        "name": "author",
                        "in": "path",
                        "description": "ID of the author to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Author data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAuthorRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Author updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Author"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Author not found"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email has already been taken."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Authors"
                ],
                "summary": "Delete an author",
                "description": "Deletes an author record by ID.",
                "operationId": "deleteAuthor",
                "parameters": [
                    {
                        "name": "author",
                        "in": "path",
                        "description": "ID of the author to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Author deleted successfully (No Content)"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Author not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/books": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get a list of books with optional filtering and pagination",
                "operationId": "bookIndex",
                "parameters": [
                    {
                        "name": "title",
                        "in": "query",
                        "description": "Filter books by title (partial match).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "galaxy",
                            "nullable": true
                        }
                    },
                    {
                        "name": "author_name",
                        "in": "query",
                        "description": "Filter books by author's full name (partial match).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "douglas adams",
                            "nullable": true
                        }
                    },
                    {
                        "name": "genre_name",
                        "in": "query",
                        "description": "Filter books by genre name (partial match).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "science fiction",
                            "nullable": true
                        }
                    },
                    {
                        "name": "tag_name",
                        "in": "query",
                        "description": "Filter books by tag name (partial match).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "classics",
                            "nullable": true
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter books by publication year. Must be a 4-digit integer.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "maximum": 2025,
                            "minimum": 1000,
                            "example": 1979,
                            "nullable": true
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items to return per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "maximum": 50,
                            "minimum": 1,
                            "example": 15,
                            "nullable": true
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 1,
                            "example": 1,
                            "nullable": true
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Include related resources (e.g., authors, genres, reviews). Use comma-separated values.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "authors,genres"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Book"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Create a new book",
                "operationId": "bookStore",
                "requestBody": {
                    "description": "Data to create a new book",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreBookRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Book created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/books/{book}": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get a single book by slug",
                "operationId": "bookShow",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Slug of the book to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "the-lord-of-the-rings"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Include related resources (e.g., authors, genres, reviews)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "authors,genres,reviews"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Book not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Books"
                ],
                "summary": "Update an existing book",
                "operationId": "bookUpdate",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Slug of the book to update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "the-lord-of-the-rings"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Data to update the book (all fields are optional but at least one must be provided)",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBookRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Book updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Books"
                ],
                "summary": "Delete a book",
                "operationId": "bookDestroy",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Slug of the book to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "the-book-to-delete"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Book deleted successfully (No Content)",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Book not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/books/{book}/reading-progress": {
            "patch": {
                "tags": [
                    "Books"
                ],
                "summary": "Update a user's reading progress for a specific book",
                "operationId": "bookUpdateReadingProgress",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Slug of the book to update progress for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "the-lord-of-the-rings"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New reading progress data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBookReadingProgressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reading progress updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Book or User-Book relationship not found"
                    },
                    "422": {
                        "description": "Validation error (e.g., pages_read exceeds total pages)"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/books/{book}/tag": {
            "patch": {
                "tags": [
                    "Books"
                ],
                "summary": "Update a user's tag for a specific book",
                "operationId": "bookUpdateTag",
                "parameters": [
                    {
                        "name": "book",
                        "in": "path",
                        "description": "Slug of the book to update tag for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "the-lord-of-the-rings"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New tag data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBookTagRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Book tag updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Book or User-Book relationship not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/comments": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get a paginated list of all comments",
                "operationId": "commentIndex",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items to return per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "maximum": 50,
                            "minimum": 1,
                            "example": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 1,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comment"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Comments"
                ],
                "summary": "Store a new comment ",
                "description": "This endpoint allows creating a comment.",
                "operationId": "commentStore",
                "requestBody": {
                    "description": "Comment data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/posts/{post_slug}/comments": {
            "get": {
                "tags": [
                    "Comments",
                    "Posts"
                ],
                "summary": "Get comments for a specific post",
                "operationId": "indexCommentsByPost",
                "parameters": [
                    {
                        "name": "post_slug",
                        "in": "path",
                        "description": "The slug of the post to retrieve comments for.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "my-first-post"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items to return per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "maximum": 50,
                            "minimum": 1,
                            "example": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 1,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comment"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Resource not found."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Comments",
                    "Posts"
                ],
                "summary": "Add a new comment to a specific post",
                "operationId": "storeCommentByPost",
                "parameters": [
                    {
                        "name": "post_slug",
                        "in": "path",
                        "description": "The slug of the post to comment on.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "my-first-post"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Comment data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden (e.g., user not following the post's author, or other access restrictions)."
                    },
                    "404": {
                        "description": "Resource not found."
                    },
                    "409": {
                        "description": "Conflict (e.g., User not following post author - UserNotFollowingException)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "You must follow the author to comment on this post."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/reviews/{review_slug}/comments": {
            "get": {
                "tags": [
                    "Comments",
                    "Reviews"
                ],
                "summary": "Get comments for a specific review",
                "operationId": "indexCommentsByReview",
                "parameters": [
                    {
                        "name": "review_slug",
                        "in": "path",
                        "description": "The slug of the review to retrieve comments for.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "awesome-book-review"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items to return per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "maximum": 50,
                            "minimum": 1,
                            "example": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 1,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comment"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Resource not found."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Comments",
                    "Reviews"
                ],
                "summary": "Add a new comment to a specific review",
                "operationId": "storeCommentByReview",
                "parameters": [
                    {
                        "name": "review_slug",
                        "in": "path",
                        "description": "The slug of the review to comment on.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "great-read-review"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Comment data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden (e.g., user not following the review's author, or other access restrictions)."
                    },
                    "404": {
                        "description": "Resource not found."
                    },
                    "409": {
                        "description": "Conflict (e.g., User not following review author - UserNotFollowingException)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "You must follow the author to comment on this review."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/comments/{comment_slug}": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get a single comment by its slug",
                "operationId": "commentShow",
                "parameters": [
                    {
                        "name": "comment_slug",
                        "in": "path",
                        "description": "The slug of the comment to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "my-great-comment-slug"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Resource not found."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Comments"
                ],
                "summary": "Update an existing comment",
                "operationId": "commentUpdate",
                "parameters": [
                    {
                        "name": "comment_slug",
                        "in": "path",
                        "description": "The slug of the comment to update.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "my-great-comment-slug"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated comment data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden (e.g., user is not the owner of the comment)."
                    },
                    "404": {
                        "description": "Resource not found."
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Comments"
                ],
                "summary": "Delete a comment by its slug",
                "operationId": "commentDestroy",
                "parameters": [
                    {
                        "name": "comment_slug",
                        "in": "path",
                        "description": "The slug of the comment to delete.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "my-great-comment-to-delete"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment deleted successfully (No Content)"
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden (e.g., user is not the owner of the comment)."
                    },
                    "404": {
                        "description": "Resource not found."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/genres": {
            "get": {
                "tags": [
                    "Genres"
                ],
                "summary": "Get a paginated list of all genres",
                "operationId": "genreIndex",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items to return per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "maximum": 50,
                            "minimum": 1,
                            "example": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 1,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Genre"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Genres"
                ],
                "summary": "Create a new genre",
                "operationId": "genreStore",
                "requestBody": {
                    "description": "Genre data to store",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreGenreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Genre created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Genre"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/genres/{genre_slug}": {
            "get": {
                "tags": [
                    "Genres"
                ],
                "summary": "Get a single genre by its slug",
                "operationId": "genreShow",
                "parameters": [
                    {
                        "name": "genre_slug",
                        "in": "path",
                        "description": "The slug of the genre to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "fantasy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Genre"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Resource not found."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Genres"
                ],
                "summary": "Update an existing genre",
                "operationId": "genreUpdate",
                "parameters": [
                    {
                        "name": "genre_slug",
                        "in": "path",
                        "description": "The slug of the genre to update.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "fantasy"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated genre data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGenreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Genre updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Genre"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Resource not found."
                    },
                    "422": {
                        "description": "Validation error."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Genres"
                ],
                "summary": "Delete a genre by its slug",
                "operationId": "genreDestroy",
                "parameters": [
                    {
                        "name": "genre_slug",
                        "in": "path",
                        "description": "The slug of the genre to delete.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "fantasy"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Genre deleted successfully (No Content)"
                    },
                    "401": {
                        "description": "Unauthenticated."
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Resource not found."
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "FilterBookRequest": {
                "title": "Filter Book Request",
                "description": "Request body for filtering and paginating books. All fields are optional.",
                "properties": {
                    "title": {
                        "description": "Filter books by title (partial match).",
                        "type": "string",
                        "example": "galaxy",
                        "nullable": true
                    },
                    "author_name": {
                        "description": "Filter books by author's full name (partial match).",
                        "type": "string",
                        "example": "douglas adams",
                        "nullable": true
                    },
                    "genre_name": {
                        "description": "Filter books by genre name (partial match).",
                        "type": "string",
                        "example": "science fiction",
                        "nullable": true
                    },
                    "tag_name": {
                        "description": "Filter books by tag name (partial match).",
                        "type": "string",
                        "example": "classics",
                        "nullable": true
                    },
                    "year": {
                        "description": "Filter books by publication year. Must be a 4-digit integer.",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 2025,
                        "minimum": 1000,
                        "example": 1979,
                        "nullable": true
                    },
                    "per_page": {
                        "description": "Number of items to return per page.",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 50,
                        "minimum": 1,
                        "example": 15,
                        "nullable": true
                    },
                    "page": {
                        "description": "The page number to retrieve.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 1,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "StoreAuthorRequest": {
                "title": "Store Author Request",
                "description": "Request body for creating a new author",
                "required": [
                    "first_name",
                    "last_name",
                    "nationality",
                    "biography",
                    "image_url"
                ],
                "properties": {
                    "first_name": {
                        "description": "The first name of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "John"
                    },
                    "last_name": {
                        "description": "The last name of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Doe"
                    },
                    "nationality": {
                        "description": "The nationality of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "American"
                    },
                    "biography": {
                        "description": "A short biography of the author",
                        "type": "string",
                        "example": "John Doe is a prolific writer known for his captivating sci-fi novels."
                    },
                    "image_url": {
                        "description": "URL to the author's profile image",
                        "type": "string",
                        "format": "url",
                        "example": "https://example.com/images/john_doe.jpg"
                    }
                },
                "type": "object"
            },
            "StoreBookRequest": {
                "title": "Store Book Request",
                "description": "Request body for creating a new Book. All fields are required as per validation rules.",
                "required": [
                    "title",
                    "synopsis",
                    "isbn",
                    "pages_amount",
                    "chapters_amount",
                    "published_at"
                ],
                "properties": {
                    "title": {
                        "description": "Title of the book",
                        "type": "string",
                        "maxLength": 255,
                        "example": "The Secret Garden"
                    },
                    "synopsis": {
                        "description": "A brief summary or outline of the book's plot.",
                        "type": "string",
                        "example": "A classic story about a young girl who discovers a hidden garden."
                    },
                    "isbn": {
                        "description": "International Standard Book Number (unique identifier)",
                        "type": "string",
                        "maxLength": 255,
                        "example": "978-1234567890"
                    },
                    "pages_amount": {
                        "description": "Total number of pages in the book",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 288
                    },
                    "chapters_amount": {
                        "description": "Total number of chapters in the book",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 27
                    },
                    "published_at": {
                        "description": "The date the book was first published (YYYY-MM-DD)",
                        "type": "string",
                        "format": "date",
                        "example": "1911-08-01"
                    },
                    "image_url": {
                        "description": "Optional URL to the book's cover image",
                        "type": "string",
                        "format": "url",
                        "example": "https://example.com/images/secret_garden_cover.jpg",
                        "nullable": true
                    },
                    "author_ids": {
                        "description": "Optional array of author IDs to associate with the book",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        },
                        "nullable": true
                    },
                    "genre_ids": {
                        "description": "Optional array of genre IDs to associate with the book",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "StoreCommentRequest": {
                "title": "Store Comment Request",
                "description": "Request body for creating a new comment on a book or review.",
                "required": [
                    "body"
                ],
                "properties": {
                    "body": {
                        "description": "The content of the comment.",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 5,
                        "example": "This is my insightful comment about the book!"
                    }
                },
                "type": "object"
            },
            "StoreGenreRequest": {
                "title": "Store Genre Request",
                "description": "Request body for creating a new genre.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the new genre.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Science Fiction"
                    }
                },
                "type": "object"
            },
            "UpdateAuthorRequest": {
                "title": "Update Author Request",
                "description": "Request body for updating an existing author. All fields are optional, providing only the ones to be updated.",
                "properties": {
                    "first_name": {
                        "description": "The updated first name of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Janet"
                    },
                    "last_name": {
                        "description": "The updated last name of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Smith"
                    },
                    "nationality": {
                        "description": "The updated nationality of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "British"
                    },
                    "biography": {
                        "description": "An updated biography of the author",
                        "type": "string",
                        "example": "Janet Smith is a celebrated author known for her historical fiction."
                    },
                    "image_url": {
                        "description": "Updated URL to the author's profile image",
                        "type": "string",
                        "format": "url",
                        "example": "https://example.com/images/janet_smith_new.jpg"
                    }
                },
                "type": "object"
            },
            "UpdateBookReadingProgressRequest": {
                "title": "Update Book Reading Progress Request",
                "description": "Request body for updating a user's reading progress on a specific book.",
                "required": [
                    "pages_read"
                ],
                "properties": {
                    "pages_read": {
                        "description": "The current page number the user has read up to for this book.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 150
                    }
                },
                "type": "object"
            },
            "UpdateBookRequest": {
                "title": "Update Book Request",
                "description": "Request body for updating an existing Book. All fields are optional, and only provided fields will be updated.",
                "properties": {
                    "title": {
                        "description": "The updated title of the book.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "The Completely Revised Hitchhiker's Guide",
                        "nullable": true
                    },
                    "synopsis": {
                        "description": "An updated brief summary or outline of the book's plot.",
                        "type": "string",
                        "example": "Arthur Dent's continuing misadventures across the universe.",
                        "nullable": true
                    },
                    "isbn": {
                        "description": "The updated International Standard Book Number.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "978-1-840-23652-3",
                        "nullable": true
                    },
                    "published_at": {
                        "description": "The updated publication date (YYYY-MM-DD).",
                        "type": "string",
                        "format": "date",
                        "example": "1980-01-01",
                        "nullable": true
                    },
                    "pages_amount": {
                        "description": "The updated total number of pages in the book.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 250,
                        "nullable": true
                    },
                    "chapters_amount": {
                        "description": "The updated total number of chapters in the book.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 40,
                        "nullable": true
                    },
                    "image_url": {
                        "description": "Optional URL to the book's new cover image.",
                        "type": "string",
                        "format": "url",
                        "example": "https://example.com/images/new_hitchhikers_cover.jpg",
                        "nullable": true
                    },
                    "author_ids": {
                        "description": "Optional array of author IDs to associate with the book. This will overwrite existing associations.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        },
                        "nullable": true
                    },
                    "genre_ids": {
                        "description": "Optional array of genre IDs to associate with the book. This will overwrite existing associations.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateBookTagRequest": {
                "title": "Update Book Tag Request",
                "description": "Request body for updating a user's tag association for a specific book.",
                "required": [
                    "tag_id"
                ],
                "properties": {
                    "tag_id": {
                        "description": "The ID of the tag to associate with the book for the current user. Must be an existing tag ID.",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "UpdateCommentRequest": {
                "title": "Update Comment Request",
                "description": "Request body for updating an existing comment. All fields are optional.",
                "properties": {
                    "body": {
                        "description": "The updated content of the comment.",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 5,
                        "example": "This is my updated and improved comment!",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateGenreRequest": {
                "title": "Update Genre Request",
                "description": "Request body for updating an existing genre.",
                "properties": {
                    "name": {
                        "description": "The new name for the genre.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "High Fantasy",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Author": {
                "title": "Author",
                "description": "Author model representing a creative writer or artist.",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the author",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "first_name": {
                        "description": "The first name of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "J.K."
                    },
                    "last_name": {
                        "description": "The last name of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Rowling"
                    },
                    "full_name": {
                        "description": "The concatenated full name of the author (first_name + last_name)",
                        "type": "string",
                        "readOnly": true,
                        "example": "J.K. Rowling"
                    },
                    "nationality": {
                        "description": "The nationality of the author",
                        "type": "string",
                        "maxLength": 255,
                        "example": "British"
                    },
                    "biography": {
                        "description": "A brief biographical summary of the author",
                        "type": "string",
                        "example": "Joanne Rowling, most famously known as J.K. Rowling, is a British author, screenwriter, and producer best known for writing the Harry Potter fantasy series."
                    },
                    "image_url": {
                        "description": "URL to the author's profile image or photograph",
                        "type": "string",
                        "format": "url",
                        "example": "https://example.com/images/jk_rowling.jpg"
                    },
                    "slug": {
                        "description": "Unique URL-friendly slug for the author (generated from full name)",
                        "type": "string",
                        "maxLength": 255,
                        "readOnly": true,
                        "example": "jk-rowling"
                    },
                    "created_at": {
                        "description": "Timestamp when the author record was created",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:30:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the author record was last updated",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-05T15:45:00Z"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Author"
                }
            },
            "Book": {
                "title": "Book",
                "description": "Book model representing a published literary work.",
                "properties": {
                    "id": {
                        "description": "The unique identifier of the book.",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 101
                    },
                    "title": {
                        "description": "The title of the book.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "The Hitchhiker's Guide to the Galaxy"
                    },
                    "synopsis": {
                        "description": "A brief summary or outline of the book's plot and themes.",
                        "type": "string",
                        "example": "Arthur Dent's journey through space after Earth is destroyed to make way for a hyperspace bypass."
                    },
                    "isbn": {
                        "description": "The International Standard Book Number, a unique commercial book identifier.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "978-0-345-39180-3"
                    },
                    "pages_amount": {
                        "description": "The total number of pages in the book.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 193
                    },
                    "chapters_amount": {
                        "description": "The total number of chapters in the book.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "example": 35
                    },
                    "published_at": {
                        "description": "The date when the book was originally published (YYYY-MM-DD).",
                        "type": "string",
                        "format": "date",
                        "example": "1979-10-12"
                    },
                    "slug": {
                        "description": "A URL-friendly, unique identifier for the book, derived from its title.",
                        "type": "string",
                        "readOnly": true,
                        "example": "the-hitchhikers-guide-to-the-galaxy"
                    },
                    "image_url": {
                        "description": "The URL to the book's cover image.",
                        "type": "string",
                        "format": "url",
                        "example": "https://example.com/books/hitchhikers_guide.jpg",
                        "nullable": true
                    },
                    "reading_progress": {
                        "description": "The current authenticated user's reading progress percentage for this book (0-100).",
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 50
                    },
                    "average_rating": {
                        "description": "The calculated average rating of the book, formatted to one decimal place.",
                        "type": "string",
                        "readOnly": true,
                        "example": "4.2"
                    },
                    "created_at": {
                        "description": "The timestamp when the book record was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T10:00:00Z"
                    },
                    "updated_at": {
                        "description": "The timestamp when the book record was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T11:00:00Z"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Book"
                }
            },
            "Comment": {
                "title": "Comment",
                "description": "Comment model representing user feedback on commentable resources like books or posts.",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the comment",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "user_id": {
                        "description": "The ID of the user who made the comment",
                        "type": "integer",
                        "format": "int64",
                        "example": 10
                    },
                    "commentable_id": {
                        "description": "The ID of the resource (e.g., book_id, post_id) the comment belongs to",
                        "type": "integer",
                        "format": "int64",
                        "example": 101
                    },
                    "commentable_type": {
                        "description": "The type of the resource the comment belongs to (e.g., 'App\\\\Models\\\\API\\\\V1\\\\Book', 'App\\\\Models\\\\API\\\\V1\\\\Post')",
                        "type": "string",
                        "example": "App\\\\Models\\\\API\\\\V1\\\\Book"
                    },
                    "body": {
                        "description": "The content of the comment",
                        "type": "string",
                        "example": "This is a great book! I really enjoyed it."
                    },
                    "slug": {
                        "description": "Unique URL-friendly slug for the comment (generated from body)",
                        "type": "string",
                        "maxLength": 255,
                        "readOnly": true,
                        "example": "this-is-a-great-book"
                    },
                    "related_to": {
                        "description": "The type of the resource the comment is related to (e.g., 'book', 'post')",
                        "type": "string",
                        "readOnly": true,
                        "example": "book"
                    },
                    "created_at": {
                        "description": "Timestamp when the comment record was created",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the comment record was last updated",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:15:00Z"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Comment"
                }
            },
            "Genre": {
                "title": "Genre",
                "description": "Genre model representing different categories for books.",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the genre",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "description": "The name of the genre",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Fantasy"
                    },
                    "slug": {
                        "description": "Unique URL-friendly slug for the genre (generated from name)",
                        "type": "string",
                        "maxLength": 255,
                        "readOnly": true,
                        "example": "fantasy"
                    },
                    "created_at": {
                        "description": "Timestamp when the genre record was created",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2024-05-30T10:00:00.000000Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the genre record was last updated",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2024-05-30T10:00:00.000000Z"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Genre"
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Enter token in format (Bearer <token>)"
            }
        }
    },
    "tags": [
        {
            "name": "Authors",
            "description": "API Endpoints for Authors"
        },
        {
            "name": "Books",
            "description": "API Endpoints for Books"
        },
        {
            "name": "Comments",
            "description": "Comments"
        },
        {
            "name": "Posts",
            "description": "Posts"
        },
        {
            "name": "Reviews",
            "description": "Reviews"
        },
        {
            "name": "Genres",
            "description": "Genres"
        }
    ]
}